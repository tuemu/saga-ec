AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    saga-ec

    Sample SAM Template for saga-ec

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Runtime: python3.6
        Timeout: 15
        MemorySize: 256
        Environment: 
          Variables: 
            TABLE_ORDER: SagaEcOrder
            # TABLE_NAME: !Ref SamSampleDynamoTable #★変更箇所

Resources:

    HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: 'functions/sample_function/lambda_function.zip'
            Handler: lambda_function.lambda_handler
            Role: !GetAtt LambdaToDynamoDbIamRole.Arn # arn:aws:iam::725683553534:role/saga-ec-Lambda  
            Runtime: python3.6
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    PARAM1: VALUE
            Events:
                Api:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /hello
                        Method: get

    SagaEcOrderCreateFunction:
      Type: AWS::Serverless::Function
      Properties:
        Runtime: python3.6
        Handler: order.create
        Role: arn:aws:iam::725683553534:role/saga-ec-Lambda  
        CodeUri: 'functions/order/lambda_function.zip'
        Events:
          Api:
            Type: Api
            Properties:
              Path: /orders
              Method: post

    SagaEcOrderReadFunction:
      Type: AWS::Serverless::Function
      Properties:
        Runtime: python3.6
        Handler: order.read
        Role: arn:aws:iam::725683553534:role/saga-ec-Lambda  
        CodeUri: 'functions/order/lambda_function.zip'
        Events:
          Api:
            Type: Api
            Properties:
              Path: /orders/{txId}
              Method: get

    SagaEcOrderListFunction:
      Type: AWS::Serverless::Function
      Properties:
        Runtime: python3.6
        Handler: order.list
        Role: arn:aws:iam::725683553534:role/saga-ec-Lambda  
        CodeUri: 'functions/order/lambda_function.zip'
        Events:
          Api:
            Type: Api
            Properties:
              Path: /orders
              Method: get
              
    # SamSampleDynamoTable:
    #   Type: AWS::Serverless::SimpleTable
    #   Properties:
    #     PrimaryKey:
    #       Name: name
    #       Type: String
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 2
    #       WriteCapacityUnits: 2

    # SagaEcOrderTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: Order
    #     AttributeDefinitions:
    #       - 
    #         AttributeName: "TxId"
    #         AttributeType: "S"
    #       - 
    #         AttributeName: "OrderId"
    #         AttributeType: "S"
    #       - 
    #         AttributeName: "UserId"
    #         AttributeType: "S"
    #       - 
    #         AttributeName: "ItemName"
    #         AttributeType: "S"
    #       - 
    #         AttributeName: "Price"
    #         AttributeType: "N"
    #       - 
    #         AttributeName: "Quantity"
    #         AttributeType: "N"
    #       - 
    #         AttributeName: "PrevTxId"
    #         AttributeType: "S"
    #       - 
    #         AttributeName: "NextTxId"
    #         AttributeType: "S"
    #       - 
    #         AttributeName: "DeleteFlag"
    #         AttributeType: "BOOL"
    #     KeySchema: 
    #       - 
    #         AttributeName: "TxId"
    #         KeyType: "HASH"
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 2
    #       WriteCapacityUnits: 2
 
    LambdaToDynamoDbIamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          -
            PolicyName: "billing_mail_for_lambda"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "dynamodb:*"
                  Resource: "*"

# Outputs:

    # HelloWorldApi:
    #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

    # HelloWorldFunction:
    #   Description: "Hello World Lambda Function ARN"
    #   Value: !GetAtt HelloWorldFunction.Arn

    # HelloWorldFunctionIamRole:
    #   Description: "Implicit IAM Role created for Hello World function"
    #   Value: !GetAtt HelloWorldFunctionRole.Arn
